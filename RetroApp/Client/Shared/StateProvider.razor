@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public bool DarkMode { get; set; }
    public HubConnection? HubConnection;

    public SessionStore SessionStore { get; set; } = new SessionStore();

    public async Task SetDarkMode(bool darkMode)
    {
        await LocalStorage.SetItemAsync("darkMode", darkMode);
        DarkMode = darkMode;
    }

    protected override async Task OnInitializedAsync()
    {
        DarkMode = await IsDarkMode();
        if (HubConnection == null)
            await Connect();
    }

    public async Task<bool> IsDarkMode()
    {
        try
        {
            if (await LocalStorage.ContainKeyAsync("darkMode"))
                return await LocalStorage.GetItemAsync<bool>("darkMode");

            return await JS.InvokeAsync<bool>("isDarkMode");
        }
        catch
        {
            return false;
        }
    }

    private async Task Connect()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri($"/session"))
            .Build();

        HubConnection.On<string>("NoSuchSession", sessId =>
        {
            Snackbar.Add($"Couldn't find a session for {sessId}", Severity.Warning);
            NavManager.NavigateTo("/");
        });

        HubConnection.On<string>("UserAlreadyExists", userName =>
        {
            Snackbar.Add($"A user with the name {userName} already exists. ", Severity.Warning);
            NavManager.NavigateTo("/");
        });

        HubConnection.On<RetroSession>("SessionUpdate", session =>
        {
            SessionStore.Session = session;
            StateHasChanged();
        });

        HubConnection.On<SessionUser>("AddedUser", user =>
        {
            SessionStore.AddUser(user);
            StateHasChanged();
        });

        HubConnection.On<RetroSession, SessionUser>("SessionJoined", (session, user) =>
        {
            SessionStore.Session = session;
            SessionStore.ThisUser = user;
            if (NavManager.Uri == NavManager.BaseUri)
            {
                NavManager.NavigateTo("Challenge");
            }
        });

        await HubConnection.StartAsync();
    }
}
